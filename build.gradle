plugins {
    id 'dev.architectury.loom' version '1.7-SNAPSHOT'
    id 'maven-publish'
}

group = project.maven_group
version = project.mod_version

base {
    archivesName = project.archives_name
}

repositories {
    // Add NeoForged repository.
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
    flatDir {
        name = "libs"
        dirs "$projectDir/libs"
    }

    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
}

loom {
    silentMojangMappingsLicense()
}

dependencies {
    minecraft "net.minecraft:minecraft:$project.minecraft_version"
    mappings loom.officialMojangMappings()
    neoForge "net.neoforged:neoforge:$project.neoforge_version"

    implementation 'io.lettuce:lettuce-core:6.2.3.RELEASE'
    forgeRuntimeLibrary 'io.lettuce:lettuce-core:6.2.3.RELEASE'
    include 'io.lettuce:lettuce-core:6.2.3.RELEASE'

    compileOnly ':mtr:'
    compileOnly ':jade:'
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/neoforge.mods.toml') {
        expand version: project.version
    }
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}




publishing {
    publications {
        // Modified by TeaCon
        register('release', MavenPublication) {
            // noinspection GroovyAssignabilityCheck
            from components.java
            version = rootProject.mod_version
            groupId = rootProject.maven_group
            artifactId = "$mod_github_repo-$rootProject.minecraft_version"
            pom {
                name = mod_github_repo
                url = "https://github.com/$mod_github_owner/$mod_github_repo"
                licenses {
                    license {
                        name = mod_license
                        url = "https://github.com/$mod_github_owner/$mod_github_repo/blob/HEAD/LICENSE"
                    }
                }
                organization {
                    name = 'TeaConMC'
                    url = 'https://github.com/teaconmc'
                }
                developers {
                    for (mod_author in "$mod_authors".split(',')) {
                        developer { id = mod_author.trim(); name = mod_author.trim() }
                    }
                }
                issueManagement {
                    system = 'GitHub Issues'
                    url = "https://github.com/$mod_github_owner/$mod_github_repo/issues"
                }
                scm {
                    url = "https://github.com/$mod_github_owner/$mod_github_repo"
                    connection = "scm:git:git://github.com/$mod_github_owner/${mod_github_repo}.git"
                    developerConnection = "scm:git:git@github.com:$mod_github_owner/${mod_github_repo}.git"
                }
            }
        }
    }
    repositories {
        // Modified by TeaCon
        maven {
            name "teacon"
            url "s3://maven/"
            credentials(AwsCredentials) {
                accessKey = System.env.ARCHIVE_ACCESS_KEY
                secretKey = System.env.ARCHIVE_SECRET_KEY
            }
        }
    }
}

// Added by TeaCon
tasks.withType(PublishToMavenRepository).configureEach {
    if (repository && repository.name == "archive") {
        it.onlyIf {
            System.env.MAVEN_USERNAME && System.env.MAVEN_PASSWORD
        }
    }
}

abstract class TeaConDumpPathToGitHub extends DefaultTask {
    @Input
    abstract Property<String> getPublishName()
    @InputFile
    abstract RegularFileProperty getTargetFile()
    @TaskAction
    void dump() {
        if (System.env.GITHUB_ACTIONS) {
            File theFile = targetFile.getAsFile().get()

            def outputFile = new File(System.env.GITHUB_OUTPUT)
            // Use the env-specific line separator for maximally possible compatibility
            def newLine = System.getProperty('line.separator')

            // Write out new env variable for later usage
            outputFile << newLine << "artifact_name=${theFile.getName()}"
            outputFile << newLine << "artifact_publish_name=${publishName.get()}"
            outputFile << newLine << "artifact_path=${theFile.absolutePath}"
        }
    }
}

// Added by TeaCon
tasks.register("githubActionOutput", TeaConDumpPathToGitHub) { task ->
    task.onlyIf { System.env.GITHUB_ACTIONS }
    task.getTargetFile().set(jar.archiveFile)
    task.getPublishName().set("${jar.archiveBaseName.get()}-${version}.jar")
}
